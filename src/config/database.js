// Èò∂ÊÆµÂÖ≠ÔºöÊï∞ÊçÆÂ∫ìÈÖçÁΩÆ
const { Sequelize } = require('sequelize');

// Êï∞ÊçÆÂ∫ìËøûÊé•ÈÖçÁΩÆ
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: './database/tutorial.db', // ‰ΩøÁî®SQLiteÊñá‰ª∂Êï∞ÊçÆÂ∫ìÔºå‰æø‰∫éÊºîÁ§∫
  logging: process.env.NODE_ENV === 'development' ? console.log : false,
  pool: {
    max: 10,
    min: 0,
    acquire: 30000,
    idle: 10000
  },
  define: {
    // Ëá™Âä®Ê∑ªÂä†Êó∂Èó¥Êà≥
    timestamps: true,
    // ËΩØÂà†Èô§Ôºà‰∏çÂÆûÈôÖÂà†Èô§ËÆ∞ÂΩïÔºåÂè™Ê†áËÆ∞‰∏∫Âà†Èô§Ôºâ
    paranoid: true,
    // ‰ΩøÁî®‰∏ãÂàíÁ∫øÂëΩÂêçÊ≥ï
    underscored: true,
    // Ë°®Âêç‰∏çËá™Âä®Â§çÊï∞Âåñ
    freezeTableName: true
  }
});

// ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•
const testConnection = async () => {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäüÔºÅ');
    
    const dbInfo = {
      dialect: sequelize.getDialect(),
      version: sequelize.getDatabaseVersion ? await sequelize.getDatabaseVersion() : 'Unknown',
      config: {
        host: sequelize.config.host || 'local file',
        database: sequelize.config.database || sequelize.config.storage,
        pool: sequelize.config.pool
      }
    };
    
    console.log('üìä Êï∞ÊçÆÂ∫ì‰ø°ÊÅØ:', JSON.stringify(dbInfo, null, 2));
    return true;
  } catch (error) {
    console.error('‚ùå Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•:', error.message);
    return false;
  }
};

// ÂêåÊ≠•Êï∞ÊçÆÂ∫ìÊ®°Âûã
const syncDatabase = async (options = {}) => {
  try {
    const defaultOptions = {
      force: false, // ‰∏çÂº∫Âà∂ÈáçÂª∫Ë°®
      alter: false  // ‰∏çËá™Âä®‰øÆÊîπË°®ÁªìÊûÑ
    };
    
    const syncOptions = { ...defaultOptions, ...options };
    
    console.log('üîÑ ÂºÄÂßãÂêåÊ≠•Êï∞ÊçÆÂ∫ìÊ®°Âûã...');
    await sequelize.sync(syncOptions);
    
    if (syncOptions.force) {
      console.log('‚ö†Ô∏è  Êï∞ÊçÆÂ∫ìË°®Â∑≤ÈáçÂª∫ÔºàÊâÄÊúâÊï∞ÊçÆÂ∑≤Ê∏ÖÁ©∫Ôºâ');
    } else if (syncOptions.alter) {
      console.log('üîß Êï∞ÊçÆÂ∫ìË°®ÁªìÊûÑÂ∑≤Êõ¥Êñ∞');
    } else {
      console.log('‚úÖ Êï∞ÊçÆÂ∫ìÊ®°ÂûãÂêåÊ≠•ÂÆåÊàê');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Êï∞ÊçÆÂ∫ìÂêåÊ≠•Â§±Ë¥•:', error.message);
    return false;
  }
};

// ÂÖ≥Èó≠Êï∞ÊçÆÂ∫ìËøûÊé•
const closeConnection = async () => {
  try {
    await sequelize.close();
    console.log('üîí Êï∞ÊçÆÂ∫ìËøûÊé•Â∑≤ÂÖ≥Èó≠');
  } catch (error) {
    console.error('‚ùå ÂÖ≥Èó≠Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•:', error.message);
  }
};

// Êï∞ÊçÆÂ∫ìÂÅ•Â∫∑Ê£ÄÊü•
const healthCheck = async () => {
  try {
    await sequelize.authenticate();
    const stats = await sequelize.query('SELECT 1 as health_check', {
      type: Sequelize.QueryTypes.SELECT
    });
    
    return {
      status: 'healthy',
      connection: 'active',
      timestamp: new Date().toISOString(),
      test_query: stats[0]?.health_check === 1
    };
  } catch (error) {
    return {
      status: 'unhealthy',
      connection: 'failed',
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
};

// Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÁªüËÆ°‰ø°ÊÅØ
const getStats = async () => {
  try {
    // Ëé∑ÂèñÊâÄÊúâË°®Âêç
    const tables = await sequelize.getQueryInterface().showAllTables();
    
    const stats = {
      tables: tables.length,
      tableNames: tables,
      models: Object.keys(sequelize.models),
      connections: {
        max: sequelize.options.pool.max,
        min: sequelize.options.pool.min,
        active: sequelize.connectionManager.pool?.size || 0
      },
      uptime: process.uptime(),
      timestamp: new Date().toISOString()
    };
    
    return stats;
  } catch (error) {
    return {
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
};

module.exports = {
  sequelize,
  testConnection,
  syncDatabase,
  closeConnection,
  healthCheck,
  getStats,
  Sequelize
};